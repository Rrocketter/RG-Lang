| (means plus or minus)
* (zero or more)
? (optional)

statements  : NEWLINE* expr (NEWLINE+ expr)* NEWLINE*

expression : KEYWORD: VAR IDENTIFIER EQ expr
           : comparision expression (( KEYWORD: AND | KEYWORD: OR ) comparision expression)*

comparision expression           :  NOT comparision expression
                                 : arithmetic expression ((EE | LT | GT | LTE | GTE) arithmetic expression)*

arithmetic expression           : term ((PLUS | MINUS) term)*

term : factor ((MUL| DIV) factor ) *

factor : (PLUS | MINUS) factor
       : power

POWER : call (POW factor)*

call : atom (LPAREN (expression (COMMA expression)*)? RPAREN)?

atom :  INT | FlOAT | STRING | IDENTIFIER
     :  LPAREN expression RPAREN
     :  list-expression
     :  if-expression
     :  for-expression
     :  while-expression
     :  function-definition

list-expression : LSQUARE (expression (COMMA expression)*)? RSQUARE

if-expr     : KEYWORD:IF expression KEYWORD:THEN
              (expr if-expression-b|if-expr-c?)
            | (NEWLINE statements KEYWORD:END|if-expression-b|if-expr-c)

if-expr-b   : KEYWORD:ELIF expression KEYWORD:THEN
              (expr if-expression-b|if-expression-c?)
            | (NEWLINE statements KEYWORD:END|if-expression-b|if-expression-c)

if-expr-c   : KEYWORD:ELSE
              expression
            | (NEWLINE statements KEYWORD:END)

for-expr    : KEYWORD:FOR IDENTIFIER EQ expression KEYWORD:TO expr
              (KEYWORD:STEP expression)? KEYWORD:THEN
              expression
            | (NEWLINE statements KEYWORD:END)

while-expr  : KEYWORD:WHILE expression KEYWORD:THEN
              expression
            | (NEWLINE statements KEYWORD:END)

func-def    : KEYWORD:FUN IDENTIFIER?
              LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
              (ARROW expression)
            | (NEWLINE statements KEYWORD:END)